
package at.jku.anttracks.heap.listener;

import at.jku.anttracks.heap.DetailedHeap;
import at.jku.anttracks.heap.objects.ArrayObjectInfo;
import at.jku.anttracks.heap.objects.ObjectInfo;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

public class ArrayLengthLogListener extends NewObjectLogListener {

    private final File file;

    private final Object lock;
    private final Map<Integer, AtomicLong> lengths;

    public ArrayLengthLogListener(File file) {
        this.file = file;
        if (file.exists()) {
            file.delete();
        }
        lock = new Object();
        lengths = new ConcurrentHashMap<>();
    }

    public static void init(DetailedHeap heap) {
        String log = System.getProperty("statistics.arraylength.log");
        if (log != null) {
            heap.addListener(new ArrayLengthLogListener(new File(log)));
        }
    }

    @Override
    protected void record(ObjectInfo obj) {
        if (!obj.isArray()) {
            return;
        }
        ArrayObjectInfo array = (ArrayObjectInfo) obj;
        record(array.getLength());
    }

    private void record(int length) {
        AtomicLong counter = lengths.get(length);
        if (counter == null) {
            synchronized (lock) {
                counter = lengths.get(length);
                if (counter == null) {
                    counter = new AtomicLong(0);
                    lengths.put(length, counter);
                }
            }
        }
        counter.incrementAndGet();
    }

    @Override
            public void close() {
        try (BufferedWriter out = new BufferedWriter(new FileWriter(file))) {
            for (Integer length : lengths.keySet()) {
                long count = lengths.get(length).get();
                if (count == 0) {
                    continue;
                }
                out.write(String.valueOf(length));
                out.write(" ");
                out.write(String.valueOf(count));
                out.write("\n");
            }
        } catch (IOException e) {
            e.printStackTrace(System.err);
        }
    }
}
