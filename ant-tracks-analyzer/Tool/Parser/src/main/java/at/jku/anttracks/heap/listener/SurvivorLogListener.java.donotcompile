
package at.jku.anttracks.heap.listener;

import at.jku.anttracks.heap.*;
import at.jku.anttracks.heap.space.Space;
import at.jku.anttracks.heap.space.SpaceInfo;
import at.jku.anttracks.parser.ParsingInfo;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class SurvivorLogListener implements HeapListener<DetailedHeap> {

    private final File file_major, file_minor;
    private final Map<Space, Long> fills;

    private long count_before, count_after;

    public SurvivorLogListener(String file) {
        file_major = new File(file.replace("{0}", "major"));
        file_minor = new File(file.replace("{0}", "minor"));
        fills = new HashMap<>();
        if (file_major.exists()) {
            file_major.delete();
        }
        if (file_minor.exists()) {
            file_minor.delete();
        }
    }

    @Override
    public void phaseChanging(GarbageCollectionType from,
                              GarbageCollectionType to,
                              GarbageCollectionCause cause,
                              boolean concurrent,
                              boolean failed,
                              long time,
                              long position,
                              ParsingInfo parsingInfo,
                              boolean withinSelectedTimeWindow) {
        if (from != GarbageCollectionType.MUTATOR && !(cause.name.equals("System.gc()")) && !(cause.name.equals("JvmtiEnv ForceGarbageCollection"))) {
            count_before = count_after = 0;
            for (Space space : heap.getSpacesCloned()) {
                if (space == null) {
                    continue;
                }
                if (space.getTransitionType() == SpaceInfo.TransitionType.ReplaceAll) {
                    space.iterate(heap,
                                  (address, objectInfo, spaze, type, size, isArray, arrayLength, allocationSite, pointedFrom, pointsTo, eventType, rootPtrs, age) ->
                                          count_before++,
                                  ObjectVisitor.Settings.NO_INFOS,
                                  null,
                                  false,
                                  null);
                }
                final Long first_addr = space.getTransitionType() == SpaceInfo.TransitionType.ReplaceAll ? null : fills.get(space);
                space.iterate(
                        heap,
                        (address, objectInfo, spaze, type, size, isArray, arrayLength, allocationSite, pointedFrom, pointsTo, eventType, rootPtrs, age) -> {
                            if (first_addr != null && address < first_addr) {
                                return;
                            }
                            count_after++;
                        },
                        ObjectVisitor.Settings.NO_INFOS);
            }
            double ratio = 1.0 * count_after / count_before;
            if (Double.isInfinite(ratio) || Double.isNaN(ratio)) {
                ratio = 0;
            }
            assert ratio >= 0;
            try (BufferedWriter out = new BufferedWriter(new FileWriter(from.full ? file_major : file_minor, true))) {
                out.append(String.format("%.6f", ratio));
                out.append("\n");
            } catch (IOException e) {
                e.printStackTrace(System.err);
            }
        }
    }

    @Override
    public void phaseChanged(GarbageCollectionType from,
                             GarbageCollectionType to,
                             GarbageCollectionCause cause,
                             boolean concurrent,
                             boolean failed,
                             long time,
                             long position,
                             ParsingInfo parsingInfo,
                             boolean withinSelectedTimeWindow) {
        if (to != GarbageCollectionType.MUTATOR) {
            fills.clear();
            for (Space space : heap.getSpacesCloned()) {
                if (space == null) {
                    continue;
                }
                fills.put(space, space.getFill());
            }
        }
    }

    @Override
            public void close() {}

    public static void init(DetailedHeap heap) {
        String log = System.getProperty("statistics.survivorratio.log");
        if (log != null) {
            heap.addListener(new SurvivorLogListener(log));
        }
    }

}
