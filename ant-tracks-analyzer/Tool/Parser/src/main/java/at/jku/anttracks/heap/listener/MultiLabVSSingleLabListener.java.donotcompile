package at.jku.anttracks.heap.listener;

import at.jku.anttracks.heap.DetailedHeap;
import at.jku.anttracks.heap.GarbageCollectionCause;
import at.jku.anttracks.heap.GarbageCollectionType;
import at.jku.anttracks.heap.HeapListener;
import at.jku.anttracks.heap.at.jku.anttracks.heap.labs.MultiObjectLab;
import at.jku.anttracks.heap.labs.SingleObjectLab;
import at.jku.anttracks.heap.space.Space;
import at.jku.anttracks.parser.ParsingInfo;
import at.jku.anttracks.util.Counter;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class MultiLabVSSingleLabListener implements HeapListener<DetailedHeap> {

    private final File file;

    private long time;

    public MultiLabVSSingleLabListener(File file) {
        this.file = file;
    }

    @Override
    public void phaseChanging(GarbageCollectionType from,
                              GarbageCollectionType to,
                              GarbageCollectionCause cause,
                              boolean concurrent,
                              boolean failed,
                              long time,
                              long position,
                              ParsingInfo parsingInfo,
                              boolean withinSelectedTimeWindow) {

    }

    @Override
    public void phaseChanged(GarbageCollectionType from,
                             GarbageCollectionType to,
                             GarbageCollectionCause cause,
                             boolean concurrent,
                             boolean failed,
                             long time,
                             long position,
                             ParsingInfo parsingInfo,
                             boolean withinSelectedTimeWindow) {
        if (file != null) {
            // END GC
            Counter singleLabCount = new Counter();
            Counter multiLabCount = new Counter();
            Counter otherLabCount = new Counter();
            Counter singleLabBytes = new Counter();
            Counter multiLabBytes = new Counter();
            Counter otherLabBytes = new Counter();

            if (to == GarbageCollectionType.MUTATOR) {
                for (Space s : heap.getSpacesUncloned()) {
                    Arrays.stream(s.getLabs()).forEach(lab -> {
                        if (lab instanceof MultiObjectLab) {
                            multiLabCount.inc();
                            multiLabBytes.add(lab.capacity());
                        } else if (lab instanceof SingleObjectLab) {
                            singleLabCount.inc();
                            singleLabBytes.add(lab.capacity());
                        } else {
                            otherLabCount.inc();
                            otherLabBytes.add(lab.capacity());
                        }
                    });
                }

                try (BufferedWriter out = new BufferedWriter(new FileWriter(file, true))) {
                    out.write(String.format("GC end - end (full: %s):\n", from.full));
                    out.write(String.format("SingleLab: %,14d (%5.2f%%) %,14d (%5.2f%%)\n",
                                            singleLabCount.get(),
                                            singleLabCount.get() * 100.0 / (singleLabCount.get() + multiLabCount.get() + otherLabCount.get()),
                                            singleLabBytes.get(),
                                            singleLabBytes.get() * 100.0 / (singleLabBytes.get() + multiLabBytes.get() + otherLabBytes.get())));
                    out.write(String.format(" MultiLab: %,14d (%5.2f%%) %,14d (%5.2f%%)\n",
                                            multiLabCount.get(),
                                            multiLabCount.get() * 100.0 / (singleLabCount.get() + multiLabCount.get() + otherLabCount.get()),
                                            multiLabBytes.get(),
                                            multiLabBytes.get() * 100.0 / (singleLabBytes.get() + multiLabBytes.get() + otherLabBytes.get())));
                    out.write(String.format(" OtherLab: %,14d (%5.2f%%) %,14d (%5.2f%%)\n",
                                            otherLabCount.get(),
                                            otherLabCount.get() * 100.0 / (singleLabCount.get() + multiLabCount.get() + otherLabCount.get()),
                                            otherLabBytes.get(),
                                            otherLabBytes.get() * 100.0 / (singleLabBytes.get() + multiLabBytes.get() + otherLabBytes.get())));
                } catch (IOException e) {
                    e.printStackTrace(System.err);
                }
            }
        }
    }

    @Override
            public void close() {

    }

    public static void init(DetailedHeap heap) {
        String log = System.getProperty("statistics.labs.log");
        if (log != null) {
            File f = new File(log);
            if (f.exists()) {
                f.delete();
            }
            try {
                f.createNewFile();
            } catch (Exception ex) {
                f = null;
            }
            heap.addListener(new MultiLabVSSingleLabListener(f));
        }
    }
}
