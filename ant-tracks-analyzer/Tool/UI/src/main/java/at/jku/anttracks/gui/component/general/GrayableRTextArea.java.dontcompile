package at.jku.anttracks.gui.component.general;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;

import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

public class GrayableRTextArea extends RSyntaxTextArea {

	private static final long serialVersionUID = 4793278573637573586L;
	private static final String text1ToShow = "You are running AntTracks on a JRE without a Java compiler.";
	private static final String text2ToShow = "Use a JDK to enable on-the-fly compilation.";

	public GrayableRTextArea(int rows, int cols) {
		super(rows, cols);
	}

	@Override
	public void paint(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

		super.paint(g2d);
		if (!isEnabled()) {
			// Gray alpha background
			g2d.setColor(new Color(105.0f / 255.0f, 105.0f / 255.0f, 105.0f / 255.0f, 0.7f));
			g2d.fillRect(0, 0, getWidth(), getHeight());

			// Text
			float textX = ((getWidth()
					- Math.max(g2d.getFontMetrics().stringWidth(text1ToShow), g2d.getFontMetrics().stringWidth(text2ToShow))) / 2);
			// http://stackoverflow.com/questions/27706197/how-can-i-center-graphics-drawstring-in-java
			float textY = ((getHeight() - g2d.getFontMetrics().getHeight() * 2) / 2) + g2d.getFontMetrics().getAscent();
			Rectangle textBounds = getStringBounds(g2d, text1ToShow, textX, textY);
			Rectangle text2Bounds = getStringBounds(g2d, text2ToShow, textX, textY + g2d.getFontMetrics().getHeight());
			textBounds.add(text2Bounds);
			textBounds.grow(4, 4);

			// Gray non-alpha text background
			g2d.setColor(new Color(192.0f / 255.0f, 192.0f / 255.0f, 192.0f / 255.0f, 1.0f));
			g2d.fill(textBounds);
			g2d.setColor(Color.BLACK);
			g2d.draw(textBounds);

			// Centered text
			g2d.setColor(Color.BLACK);
			g2d.drawString(text1ToShow, textX, textY);
			g2d.drawString(text2ToShow, textX, textY + g2d.getFontMetrics().getHeight() + 1);
		}
	}

	private Rectangle getStringBounds(Graphics2D g2, String str, float x, float y) {
		FontRenderContext frc = g2.getFontRenderContext();
		GlyphVector gv = g2.getFont().createGlyphVector(frc, str);
		return gv.getPixelBounds(null, x, y);
	}
}
